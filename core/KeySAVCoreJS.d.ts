//
// Type definitions for KeySAVCoreJS, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null
//
// Generated by DuoCode Compiler 1.0.1355.0 [Trial]
//

/// <reference path="./mscorlib.d.ts" />

declare module KeySAVCore {
    // KeySAVCore.BattleVideoReader
    export interface BattleVideoReader extends System.Object {
        getPkx(slot: byte, opponent: byte): Structures.PKX;
        get_DumpsEnemy(): boolean;
    }
    export interface BattleVideoReaderTypeFunc extends TypeFunction {
        prototype: BattleVideoReader;
    }
    var BattleVideoReader: BattleVideoReaderTypeFunc;

    // KeySAVCore.ISaveReader
    export interface ISaveReader {
        KeySAVCore$ISaveReader$get_KeyName(): string;
        KeySAVCore$ISaveReader$get_UnlockedSlots(): ushort;
        KeySAVCore$ISaveReader$scanSlots$2(from: ushort, to: ushort): void;
        KeySAVCore$ISaveReader$scanSlots(): void;
        KeySAVCore$ISaveReader$scanSlots$1(pos: ushort): void;
        KeySAVCore$ISaveReader$getPkx(pos: ushort): System.Nullable$1<Structures.PKX>;
    }
    var ISaveReader: TypeFunction;

    // KeySAVCore.SaveBreaker
    export interface SaveBreakerTypeFunc extends TypeFunction {
        eggnames: string[];
        Load(input: byte[], keyGetter: System.Func$3<uint, uint, Structures.SaveKey>): ISaveReader;
        Break(break1: byte[], break2: byte[], result: string, respkx: byte[]): System.Nullable$1<Structures.SaveKey>;
    }
    var SaveBreaker: SaveBreakerTypeFunc;

    // KeySAVCore.SaveReaderEncrypted
    export interface SaveReaderEncrypted extends System.Object, ISaveReader {
        get_KeyName(): string;
        get_UnlockedSlots(): ushort;
        scanSlots(): void;
        scanSlots$1(pos: ushort): void;
        scanSlots$2(start: ushort, end: ushort): void;
        getPkx(pos: ushort): System.Nullable$1<Structures.PKX>;
    }
    export interface SaveReaderEncryptedTypeFunc extends TypeFunction {
        prototype: SaveReaderEncrypted;
    }
    var SaveReaderEncrypted: SaveReaderEncryptedTypeFunc;

    // KeySAVCore.Utility
    export interface UtilityTypeFunc extends TypeFunction {
        xor(one: byte[], two: byte[]): byte[];
        xor$1(first: byte[], second: byte[], secondoffset: uint): byte[];
        xor$2(first: byte[], firstOffset: uint, second: byte[], secondOffset: uint, length: uint): byte[];
        xor$3(first: byte[], firstOffset: uint, second: byte[], secondOffset: uint, target: byte[], targetOffset: uint, length: uint): void;
        XorInPlace(self: byte[], offset: uint, other: byte[], otherOffset: uint, length: uint): void;
        SequenceEqual(self: byte[], other: byte[], offset: uint): boolean;
        SequenceEqual$1(one: byte[], oneOffset: uint, two: byte[], twoOffset: uint, length: uint): boolean;
        Empty(array: byte[]): boolean;
        Empty$1(array: byte[], offset: uint, length: uint): boolean;
        TrimCString(str: string): string;
        CleanFileName(fileName: string): string;
        Switch<T>(T, one: T, two: T): void;
    }
    var Utility: UtilityTypeFunc;
    module Exceptions {
        // KeySAVCore.Exceptions.NoKeyException
        export interface NoKeyException extends System.Exception {
        }
        export interface NoKeyExceptionTypeFunc extends TypeFunction {
            prototype: NoKeyException;
            ctor: { new (): NoKeyException };
        }
        var NoKeyException: NoKeyExceptionTypeFunc;

        // KeySAVCore.Exceptions.NoSaveException
        export interface NoSaveException extends System.Exception {
        }
        export interface NoSaveExceptionTypeFunc extends TypeFunction {
            prototype: NoSaveException;
            ctor: { new (): NoSaveException };
        }
        var NoSaveException: NoSaveExceptionTypeFunc;

        // KeySAVCore.Exceptions.NoBattleVideoException
        export interface NoBattleVideoException extends System.Exception {
        }
        export interface NoBattleVideoExceptionTypeFunc extends TypeFunction {
            prototype: NoBattleVideoException;
            ctor: { new (): NoBattleVideoException };
        }
        var NoBattleVideoException: NoBattleVideoExceptionTypeFunc;
    }
    module Structures {
        // KeySAVCore.Structures.PKX
        export interface PKX extends System.ValueType {
            EC: uint;
            PID: uint;
            IV32: uint;
            exp: uint;
            HP_EV: uint;
            ATK_EV: uint;
            DEF_EV: uint;
            SPA_EV: uint;
            SPD_EV: uint;
            SPE_EV: uint;
            HP_IV: uint;
            ATK_IV: uint;
            DEF_IV: uint;
            SPE_IV: uint;
            SPA_IV: uint;
            SPD_IV: uint;
            cnt_cool: uint;
            cnt_beauty: uint;
            cnt_cute: uint;
            cnt_smart: uint;
            cnt_tough: uint;
            cnt_sheen: uint;
            markings: uint;
            hptype: uint;
            nicknamestr: string;
            notOT: string;
            ot: string;
            genderstring: string;
            PKRS_Strain: int;
            PKRS_Duration: int;
            metlevel: int;
            otgender: int;
            isegg: boolean;
            isnick: boolean;
            isshiny: boolean;
            isghost: boolean;
            feflag: ushort;
            genderflag: ushort;
            altforms: ushort;
            ability: ushort;
            abilitynum: ushort;
            nature: ushort;
            species: ushort;
            helditem: ushort;
            TID: ushort;
            SID: ushort;
            TSV: ushort;
            ESV: ushort;
            move1: ushort;
            move2: ushort;
            move3: ushort;
            move4: ushort;
            move1_pp: ushort;
            move2_pp: ushort;
            move3_pp: ushort;
            move4_pp: ushort;
            move1_ppu: ushort;
            move2_ppu: ushort;
            move3_ppu: ushort;
            move4_ppu: ushort;
            eggmove1: ushort;
            eggmove2: ushort;
            eggmove3: ushort;
            eggmove4: ushort;
            chk: ushort;
            OTfriendship: ushort;
            OTaffection: ushort;
            egg_year: ushort;
            egg_month: ushort;
            egg_day: ushort;
            met_year: ushort;
            met_month: ushort;
            met_day: ushort;
            eggloc: ushort;
            metloc: ushort;
            ball: ushort;
            encountertype: ushort;
            gamevers: ushort;
            countryID: ushort;
            regionID: ushort;
            dsregID: ushort;
            otlang: ushort;
            box: short;
            slot: short;
        }
        export interface PKXTypeFunc extends TypeFunction {
            prototype: PKX;
            ctor$1: { new (pkx: byte[], box: short, slot: short, isghost: boolean): PKX };
            ctor: { new (): PKX };
            decrypt(ekx: byte[]): byte[];
            encrypt(pkx: byte[]): byte[];
            verifyCHK(pkx: byte[]): boolean;
            getDloc(ec: uint): byte;
        }
        var PKX: PKXTypeFunc;

        // KeySAVCore.Structures.SaveKey
        export interface SaveKey extends System.ValueType {
            stamp1: uint;
            stamp2: uint;
            location: byte[];
            boxOffset: uint;
            boxKey1: byte[];
            blank: byte[];
            slotsUnlocked: boolean[];
            boxKey2: byte[];
            slot1Flag: uint;
            slot1Key: byte[];
            Export(): byte[];
        }
        export interface SaveKeyTypeFunc extends TypeFunction {
            prototype: SaveKey;
            ctor$1: { new (key: byte[]): SaveKey };
            ctor: { new (): SaveKey };
        }
        var SaveKey: SaveKeyTypeFunc;
    }
}
